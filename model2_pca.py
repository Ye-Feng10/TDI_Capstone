#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Nov 17 00:56:16 2021@author: yefeng"""import numpy as npfrom itertools import chainimport pandas as pd import datetimefrom collections import Counterimport matplotlib.pyplot as pltfrom matplotlib.gridspec import GridSpecimport missingno as msnoimport osfor dirname, _, filenames in os.walk("/Users/Jack/Desktop/VAERSData"):    for filename in filenames:        print(os.path.join(dirname, filename))v11=pd.read_csv("/Users/Jack/Desktop/VAERSData/2020VAERSVAX.csv")v21=pd.read_csv("/Users/Jack/Desktop/VAERSData/2020VAERSDATA.csv")v31=pd.read_csv("/Users/Jack/Desktop/VAERSData/2020VAERSSYMPTOMS.csv")v12=pd.read_csv("/Users/Jack/Desktop/VAERSData/2021VAERSVAX.csv")v22=pd.read_csv("/Users/Jack/Desktop/VAERSData/2021VAERSDATA.csv")v32=pd.read_csv("/Users/Jack/Desktop/VAERSData/2021VAERSSYMPTOMS.csv")df1 = v11[v11["VAX_TYPE"]=="COVID19"].merge(v21,on="VAERS_ID").merge(v31,on="VAERS_ID")df2 = v12[v12["VAX_TYPE"]=="COVID19"].merge(v22,on="VAERS_ID").merge(v32,on="VAERS_ID")df = pd.concat([df1, df2])vaers_data = df.copy()# print(vaers_data.keys())# keys : 'VAERS_ID', 'VAX_TYPE', 'VAX_MANU', 'VAX_LOT', 'VAX_DOSE_SERIES',      #  'VAX_ROUTE', 'VAX_SITE', 'VAX_NAME', 'RECVDATE', 'STATE',      #  'AGE_YRS', 'CAGE_YR', 'CAGE_MO', 'SEX', 'RPT_DATE',       #  'SYMPTOM_TEXT', 'DIED', 'DATEDIED', 'L_THREAT', 'ER_VISIT',      #  'HOSPITAL', 'HOSPDAYS', 'X_STAY', 'DISABLE', 'RECOVD',      #  'VAX_DATE', 'ONSET_DATE', 'NUMDAYS', 'LAB_DATA', 'V_ADMINBY',       #  'V_FUNDBY', 'OTHER_MEDS', 'CUR_ILL', 'HISTORY', 'PRIOR_VAX',      #  'SPLTTYPE', 'FORM_VERS', 'TODAYS_DATE', 'BIRTH_DEFECT', 'OFC_VISIT',      #  'ER_ED_VISIT', 'ALLERGIES', 'SYMPTOM1', 'SYMPTOMVERSION1','SYMPTOM2',      #  'SYMPTOMVERSION2', 'SYMPTOM3', 'SYMPTOMVERSION3', 'SYMPTOM4', 'SYMPTOMVERSION4',       #  'SYMPTOM5', 'SYMPTOMVERSION5', 'date', 'date.vax', 'dur',       #  'Allergic_his', 'diabetes', 'hypertension', 'arthritis', 'Asthma',       #  'Migraine', 'copd', 'Anxiety', 'obesity', 'depression',       #  'Thyroid', 'Anemia', 'Dementia', 'Cancer', 'Kidney',      #  'Hyperlipidemia', 'CVD', 'AF', 'othermeds', 'currill',      #  'allergies','sex', 'disable', 'manu'############# symptom dictionary ####################get all symptoms and make dictionarysymptom_list = []symptom_list.extend(vaers_data[vaers_data.keys()[42]].to_list())symptom_list.extend(vaers_data[vaers_data.keys()[44]].to_list())symptom_list.extend(vaers_data[vaers_data.keys()[46]].to_list())symptom_list.extend(vaers_data[vaers_data.keys()[48]].to_list())symptom_list.extend(vaers_data[vaers_data.keys()[50]].to_list())# unique sympton listu_symptom_list = list(set(symptom_list))print(len(u_symptom_list))u_symptom_list = [x for x in u_symptom_list if x == x]print(len(u_symptom_list))# symptom dictionarysymptom_dict = {u_symptom_list[i]: i for i in range(len(u_symptom_list))}num_symptom = len(u_symptom_list)#get vaers_idVaers_id = vaers_data[vaers_data.keys()[0]].to_list()unique_id = list(set(Vaers_id))# get days in hospitcalVaers_hostday = vaers_data[vaers_data.keys()[21]].to_list()# get symptom statusVaers_symptom_1 = vaers_data[vaers_data.keys()[42]].to_list()Vaers_symptom_2 = vaers_data[vaers_data.keys()[44]].to_list()Vaers_symptom_3 = vaers_data[vaers_data.keys()[46]].to_list()Vaers_symptom_4 = vaers_data[vaers_data.keys()[48]].to_list()Vaers_symptom_5 = vaers_data[vaers_data.keys()[50]].to_list()# list of hospitalized dayshospitalized_status = []# list of symptom index for each patient - according to symptom dictionarysymptom_status = []for i in range(len(unique_id)):  # get id  temp_id = unique_id[i]  # find index of Vaers_id that gives the same id  ind_id = [i for i, x in enumerate(Vaers_id) if x == temp_id]  # find symptom  t_symptom = []  # hospital days  hospital_day = 0  for j in range(len(ind_id)):    # symptoms    t_symptom.append(Vaers_symptom_1[ind_id[j]])    t_symptom.append(Vaers_symptom_2[ind_id[j]])    t_symptom.append(Vaers_symptom_3[ind_id[j]])    t_symptom.append(Vaers_symptom_4[ind_id[j]])    t_symptom.append(Vaers_symptom_5[ind_id[j]])    t_symptom = [x for x in t_symptom if x == x]    # days in hospital    t_hostday = Vaers_hostday[ind_id[j]]    if t_hostday == 'nan':      hospital_day = max(hospital_day ,0)    else:      hospital_day = max(hospital_day ,t_hostday)  # number of days hospitalized  hospitalized_status.append(hospital_day)  # symptom list  unique_symptom = list(set(t_symptom))  symptom_idx = np.zeros([len(unique_symptom), ])  for k in range(len(unique_symptom)):    symptom_idx[k] = symptom_dict.get(unique_symptom[k])  symptom_status.append(symptom_idx)  # total number of data num_total = len(unique_id)# number of theta dimensiontheta_dim = len(u_symptom_list) + 1  # with intercept# split to train and test data# train data: 80000# test data: 27882num_train = 80000num_test = 27805import randomrandom.seed(3) # fix seedind_rand = np.array(range(num_train + num_test))random.shuffle(ind_rand)# set number of hospitalized date as np arraynum_hospitalized_day = np.array(hospitalized_status)# split to train and testtrain_num_hospitalized_day = num_hospitalized_day[ind_rand[0:num_train]]test_num_hospitalized_day = num_hospitalized_day[ind_rand[num_train: num_train+num_test]]# split symptom list to train and testtrain_symptoms = []test_symptoms = []for i in range(num_train):  train_symptoms.append(symptom_status[ind_rand[i]])for i in range(num_test):  test_symptoms.append(symptom_status[ind_rand[i+num_train]])# import thingsfrom sklearn.decomposition import SparsePCA import seaborn as snsnum_host_day = np.unique(train_num_hospitalized_day)class_host = np.zeros(train_num_hospitalized_day.shape)class_host[train_num_hospitalized_day > 0] = 1a = np.argwhere(class_host).reshape(-1)print(a.shape)# generate X_symptom (num_train, num_feature)X_symptom = np.zeros([a.shape[0], num_symptom])jj = 0for i in a:  t_symptom = np.zeros([num_symptom, ])  # print(train_symptoms[i])  t_symptom[train_symptoms[i].astype('int')] = 1  X_symptom[jj, :] = t_symptom  jj += 1num_main_symptom = 5spca = SparsePCA(n_components=num_main_symptom)Z_symptom = spca.fit_transform(X_symptom)# get all weightsE_mat = np.diag(np.ones([num_symptom, ]))Weights_symptom = spca.transform(E_mat)######## Run Below# find top k-symptomsk_symptoms = 10determinant_symptoms = []for i in range(num_main_symptom):  ind_k = np.argpartition(-np.abs(Weights_symptom[:, i]), k_symptoms)  ind_k = ind_k[:k_symptoms]  for j in range(k_symptoms):    for symptom, ind_symptom in symptom_dict.items():      if ind_symptom == ind_k[j]:        # print(symptom)        determinant_symptoms.append(symptom)# unique itdeterminant_symptoms = list(set(determinant_symptoms))print(determinant_symptoms)print(len(determinant_symptoms))# find top k-symptomsk_symptoms = 5determinant_symptoms = []for i in range(num_main_symptom):  ind_k = np.argpartition(-np.abs(Weights_symptom[:, i]), k_symptoms)  ind_k = ind_k[:k_symptoms]  for j in range(k_symptoms):    for symptom, ind_symptom in symptom_dict.items():      if ind_symptom == ind_k[j]:        # print(symptom)        determinant_symptoms.append(symptom)# unique itdeterminant_symptoms = list(set(determinant_symptoms))print(determinant_symptoms)print(len(determinant_symptoms))#['Computerised tomogram', 'Vomiting', 'SARS-CoV-2 test negative', 'Fatigue', 'Magnetic resonance imaging', 'Electrocardiogram', 'Nausea', 'Pain in extremity', 'Headache', 'Chest discomfort', 'Post transplant lymphoproliferative disorder', 'Facial neuralgia', 'Injection site vesicles', 'Asthenia', 'Pyrexia', 'Myalgia', 'Blood test', 'Dizziness', 'Chest pain', 'Dyspnoea']